Count the Number of Incremovable Subarrays I
class Solution {
    public int incremovableSubarrayCount(int[] nums) {
        int n=nums.length;
        int count=0;
        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                if(helper(nums, i, j)){
                    count++;
                }
            }
        }
        return count;
    }
    public static boolean helper(int nums[], int start, int end){
        int n=nums.length;
        int prev=0;
        for(int i=0; i<n; i++){
            if( i>=start && i<=end) continue;

           // Note that an empty array is considered strictly increasing.
            if(nums[i] <= prev) return false;
            prev = nums[i];
        }
        return true;
    }
}

Minimum Moves to Equal Array Elements II
class Solution {
    public int minMoves2(int[] nums) {
        // O(NlongN) --> TC
        Arrays.sort(nums);
        int n = nums.length;
        int i=0;
        int j=n-1;
        int count=0;
        while(i<j){
            int step = nums[j] - nums[i];
            count += step;
            i++;
            j--;
        }
        return count;
    }
}
